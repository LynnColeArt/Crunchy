require('./config/constants');
require('./patterns/vocals');

export const LYRICS = {
    verse_1: {
        lines: [
            "My cat's got claws of iron",
            "Eyes that pierce the night",
            "She stalks the farm at midnight",
            "Queen of the moonlight",
            "The rats all know her legend",
            "They whisper of her fame",
            "The mighty Duchess Fluffles",
            "No beast she cannot tame"
        ],
        stress: [
            [1,0,1,0,1,0],      // STRONG weak STRONG weak STRONG weak
            [1,0,1,0,1],        // STRONG weak STRONG weak STRONG
            [0,1,0,1,0,1,0],    // weak STRONG weak STRONG weak STRONG weak
            [1,0,0,1,0]         // STRONG weak weak STRONG weak
        ].repeat(2),
        delivery: VOCAL_STYLE
    },

    chorus: {
        lines: [
            "She's the queen of the barnyard",
            "The terror of the field",
            "My little ball of fury",
            "With whiskers made of steel",
            "WHISKERS MADE OF STEEL!"  // Final line with emphasis
        ],
        stress: [
            [0,0,1,0,0,1,0],    // weak weak STRONG weak weak STRONG weak
            [0,1,0,0,1],        // weak STRONG weak weak STRONG
            [0,1,0,1,0,1,0],    // weak STRONG weak STRONG weak STRONG weak
            [0,1,0,1,0,1],      // weak STRONG weak STRONG weak STRONG
            [1,0,1,0,1]         // STRONG weak STRONG weak STRONG
        ],
        delivery: IS_LIVE ? "power" : VOCAL_STYLE
    },

    verse_2: {
        lines: [
            "The dogs bow down before her",
            "The chickens clear the way",
            "She rules her fuzzy kingdom",
            "With paw of iron sway",
            "But still she brings me presents",
            "Dead mice upon my bed",
            "My precious killing machine",
            "Just wants to see me fed"
        ],
        stress: LYRICS.verse_1.stress,  // Same pattern as verse 1
        delivery: VOCAL_STYLE,
        dynamics: crescendo(0.2)
    },

    bridge: {
        lines: [
            "But when the day is ending",
            "And battles have been won",
            "She's purring on my laptop",
            "Her warfare finally done",
            "My mighty metal warrior",
            "So fearsome and so bold",
            "Just wants some belly scritches",
            "And treats before she's old"
        ],
        stress: [
            [0,1,0,1,0,1,0],    // Gentler rhythm for contrast
            [0,1,0,1,0,1],
            [0,1,0,1,0,1,0],
            [0,1,0,1,0,1]
        ].repeat(2),
        delivery: "intimate",
        dynamics: {
            start: "soft",
            build: exponential(0.3),
            end: "powerful"
        }
    },

    // Special ending variations
    final_chorus_extension: {
        lines: [
            "WHISKERS MADE OF STEEL!",
            "DUCHESS OF THE NIGHT!",
            "WHISKERS MADE OF STEEEEEEEL!"
        ],
        stress: [
            [1,0,1,0,1],        // All powerful emphasis
            [1,0,0,0,1],
            [1,0,1,0,1]
        ],
        delivery: "power_metal",
        dynamics: "maximum"
    }
};

// Performance adaptations
export const LYRIC_ADAPTATIONS = {
    acoustic: {
        delivery: "intimate",
        emphasis: "subtle",
        dynamics: reduce(0.3)
    },
    
    live: {
        delivery: "projected",
        emphasis: "dramatic",
        crowd_moments: [
            { after: "queen of the barnyard", duration: 2 },
            { after: "WHISKERS MADE OF STEEL!", duration: 2 }
        ]
    },
    
    studio: {
        delivery: "balanced",
        emphasis: "controlled",
        harmonies: {
            chorus: ["third_above", "fifth_above"],
            bridge_end: ["octave_above", "fifth_below"]
        }
    }
};

export default {
    lyrics: LYRICS,
    adaptations: LYRIC_ADAPTATIONS,
    
    // Helper for getting contextual lyrics
    get_lyrics: (section, context) => {
        const base = LYRICS[section];
        const adapters = LYRIC_ADAPTATIONS[PERFORMANCE_TYPE];
        
        return {
            ...base,
            delivery: adapters.delivery,
            emphasis: adapters.emphasis,
            // Add any context-specific modifications
            ...context
        };
    }
};
