require('../config/constants');
require('./rhythm');

// Basic kit piece patterns
export const KIT_PIECES = {
    kick:  { symbol: 'K', default_velocity: 0.8 },
    snare: { symbol: 'S', default_velocity: 0.7 },
    hat:   { symbol: 'h', default_velocity: 0.6 },
    ride:  { symbol: 'r', default_velocity: 0.6 },
    crash: { symbol: 'C', default_velocity: 0.8 }
};

// Core drum patterns
export const PATTERNS = {
    basic_country: {
        kick:  /K...K.../,
        snare: /..S...S./,
        hat:   /h.h.h.h./
    },

    folk_metal: {
        kick:  /K.K.K.KK/,
        snare: /..S...S./,
        hat:   /h.h.h.h./,
        crash: /C......./  // Accents
    },

    driving: {
        kick:  /K.KK.K.K/,
        snare: /..S...S./,
        ride:  /r.r.r.r./
    },

    breakdown: {
        kick:  /K.K.K.K./,
        snare: /....S.../,
        crash: /C......./
    }
};

// Fill patterns
export const FILLS = {
    country: {
        simple: {
            kick:  /K......./,
            snare: /..S.S.SS/
        },
        
        turnaround: {
            kick:  /K..K..K./,
            snare: /..S.S.SS/,
            hat:   /h.h.h.h./
        }
    },

    metal: {
        simple: {
            kick:  /K.K.K.K./,
            snare: /....SSSS/
        },
        
        intense: {
            kick:  /KKKK.KKK/,
            snare: /....SSSS/,
            crash: /C...C.../
        }
    }
};

// Performance variations
export const VARIATIONS = {
    acoustic: {
        brushes: {
            pattern: /s.s.s.s./,  // 's' for brush sweep
            intensity: 0.4,
            texture: "brush_sweep"
        },
        
        hot: {
            pattern: /S.s.S.s./,
            intensity: 0.7,
            texture: "brush_slap"
        }
    },

    live: {
        intensity_scale: (base_pattern, intensity) => ({
            ...base_pattern,
            velocity: Math.min(1.0, base_pattern.velocity * intensity * 1.2),
            texture: intensity > 0.7 ? "accent_heavy" : "normal"
        })
    }
};

// Section-specific drum behaviors
export const SECTION_PATTERNS = {
    verse: {
        start: PATTERNS.basic_country,
        build: (intensity) => 
            intensity > 0.6 ? PATTERNS.folk_metal : PATTERNS.basic_country,
        fill: FILLS.country.simple
    },

    chorus: {
        start: PATTERNS.driving,
        build: (intensity) => ({
            ...PATTERNS.folk_metal,
            crash: intensity > 0.7 ? /C......./ : null
        }),
        fill: FILLS.metal.simple
    },

    bridge: {
        start: PATTERNS.driving,
        build: (intensity) => ({
            ...PATTERNS.folk_metal,
            kick: intensity > 0.8 ? /K.KK.KKK/ : /K.K.K.K./
        }),
        fill: FILLS.metal.intense
    }
};

// Dynamic pattern generation
export const DRUM_GENERATOR = {
    get_pattern: (section, intensity) => {
        const base = SECTION_PATTERNS[section];
        const pattern = base.build(intensity);
        
        if (PERFORMANCE_TYPE === "acoustic") {
            return {
                ...VARIATIONS.acoustic.brushes,
                intensity: intensity
            };
        }
        
        return IS_LIVE ? 
            VARIATIONS.live.intensity_scale(pattern, intensity) :
            pattern;
    },

    get_fill: (section, intensity) => {
        const style = intensity > 0.6 ? FILLS.metal : FILLS.country;
        return intensity > 0.8 ? style.intense : style.simple;
    }
};

export default {
    patterns: PATTERNS,
    fills: FILLS,
    variations: VARIATIONS,
    generator: DRUM_GENERATOR,
    
    // Helper for section transitions
    transition: (from_section, to_section, intensity) => {
        const fill = DRUM_GENERATOR.get_fill(from_section, intensity);
        const next_pattern = DRUM_GENERATOR.get_pattern(to_section, intensity);
        return { fill, next_pattern };
    }
};
