require('../config/constants');
require('./melody');
require('./rhythm');

// Core fiddle techniques
export const TECHNIQUES = {
    standard: {
        double_stop: {
            intervals: [3, 4, 5],     // Thirds, fourths, fifths
            duration: /X..X../
        },
        slides: {
            approach: [-2, -1],       // Slide up from below
            release: [1, 2]           // Slide away up
        },
        tremolo: {
            speed: 16,                // 16th notes
            intensity: 0.7
        }
    },

    ornaments: {
        grace_notes: [-2, -1, 1],
        trills: [1, 2],
        turns: [-1, 0, 1, 0]
    }
};

// Style-specific patterns
export const PATTERNS = {
    folk: {
        basic_runs: [
            [D4, F4, A4, D5],         // D minor run
            [A4, D5, F5, A5],         // Upper register
            [D5, A4, F4, D4]          // Descending
        ],
        
        fiddle_fills: [
            [A4, D5, F5, E5, D5],     // Traditional fill
            [D4, F4, A4, C5, D5],     // Rising fill
            [A5, F5, D5, A4, F4]      // Cascading fill
        ],

        double_stops: [
            [[D4,F4], [F4,A4]],       // Third-based
            [[D4,A4], [A4,D5]]        // Fifth-based
        ]
    },

    metal: {
        power_runs: [
            [D4, A4, D5, A5],         // Power intervals
            [F4, C5, F5, C6],         // Upper power movement
            [A4, E5, A5, E6]          // High intensity
        ],
        
        harmonic_fills: [
            [D5, F5, A5, D6],         // High energy fills
            [D6, A5, F5, D5],         // Descending intensity
            [F5, A5, C6, D6]          // Tension builder
        ]
    }
};

// Context-sensitive transformations
export const TRANSFORMS = {
    to_metal: (folk_pattern) => ({
        notes: folk_pattern.map(note => note + 12), // Up octave
        technique: "aggressive",
        vibrato: "wide",
        attack: "harsh"
    }),

    to_folk: (metal_pattern) => ({
        notes: metal_pattern.map(note => note - 12), // Down octave
        technique: "flowing",
        vibrato: "light",
        attack: "soft"
    })
};

// Dynamic pattern generation
export const PATTERN_GENERATOR = {
    get_pattern: (section, intensity) => {
        const base_patterns = intensity > 0.6 ? 
            PATTERNS.metal : 
            PATTERNS.folk;

        return {
            pattern: base_patterns.basic_runs,
            technique: intensity > 0.7 ? 
                TECHNIQUES.standard.tremolo :
                TECHNIQUES.standard.double_stop,
            ornaments: intensity < 0.5 ?
                TECHNIQUES.ornaments : null
        };
    },

    get_fill: (section, intensity) => {
        if (intensity > 0.7) {
            return PATTERNS.metal.harmonic_fills;
        }
        return PATTERNS.folk.fiddle_fills;
    }
};

// Performance adaptations
export const PERFORMANCE_RULES = {
    live: {
        boost_intensity: 0.2,
        prefer_patterns: "metal",
        double_stops: "aggressive"
    },

    studio: {
        dynamics_range: 0.4,
        prefer_patterns: "balanced",
        double_stops: "controlled"
    },

    acoustic: {
        use_ornaments: true,
        prefer_patterns: "folk",
        double_stops: "traditional"
    }
};

export default {
    patterns: PATTERNS,
    techniques: TECHNIQUES,
    transforms: TRANSFORMS,
    generator: PATTERN_GENERATOR,
    
    // Main pattern generator with context awareness
    get_part: (section, intensity) => {
        const rules = PERFORMANCE_RULES[PERFORMANCE_TYPE];
        const pattern = PATTERN_GENERATOR.get_pattern(
            section, 
            intensity + (IS_LIVE ? 0.2 : 0)
        );
        
        return {
            ...pattern,
            style: rules.prefer_patterns,
            double_stops: rules.double_stops,
            ornaments: rules.use_ornaments ? 
                TECHNIQUES.ornaments : null
        };
    }
};
