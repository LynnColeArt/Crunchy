require('./config/constants');
require('./config/instrumentation');
require('./config/mixing-profiles');

// Import all patterns
require('./patterns/melody');
require('./patterns/rhythm');
require('./patterns/drums');
require('./patterns/fiddle');
require('./patterns/vocals');

// Import all sections
import { verse_1, verse_2 } from './sections/verse';
import { CHORUS, generate_chorus } from './sections/chorus';
import { BRIDGE, generate_bridge } from './sections/bridge';
import { SOLO, generate_solo } from './sections/solo';
import lyrics from './lyrics';

// Song metadata
const SONG_INFO = {
    title: "Whiskers of Steel",
    key: KEY,
    tempo: BASE_TEMPO,
    time_signature: TIME_SIG,
    genre: ["folk_metal", "country_fusion"],
    mood: "epic_whimsy"
};

// Overall song structure
const COMPOSITION = {
    structure: [
        { section: "verse_1", bars: 8 },
        { section: "chorus", bars: 8 },
        { section: "verse_2", bars: 8 },
        { section: "chorus", bars: 8 },
        { section: "bridge", bars: 8 },
        { section: "solo", bars: IS_LIVE ? 16 : 8 },
        { section: "chorus", bars: 8, flags: ["final"] }
    ],

    total_length: calculate_bars(),
    total_choruses: 3
};

// Performance context handler
const CONTEXT = {
    type: PERFORMANCE_TYPE,
    is_live: IS_LIVE,
    performers: PERFORMER_COUNT,
    
    setup: () => ({
        instruments: INSTRUMENTATION.active_instruments,
        mixing: MIXING_PROFILES[PERFORMANCE_TYPE],
        room: PERFORMANCE_TYPE === "live" ? "stage" : "studio"
    })
};

// Main song generator
export const generate_song = () => ({
    ...SONG_INFO,
    
    context: CONTEXT.setup(),
    
    sections: {
        verse_1: generate_verse(1),
        verse_2: generate_verse(2),
        chorus: (iteration) => generate_chorus(iteration, COMPOSITION.total_choruses),
        bridge: generate_bridge({ follows: "chorus" }),
        solo: generate_solo({ 
            follows: "bridge",
            leads_to: "final_chorus"
        })
    },

    transitions: {
        verse_to_chorus: {
            bars: 1,
            intensity: ramp(0.2),
            type: "build"
        },
        chorus_to_verse: {
            bars: 1,
            intensity: ramp(-0.1),
            type: "release"
        },
        to_bridge: {
            bars: 2,
            intensity: ramp(0.3),
            type: "dramatic_build"
        },
        to_solo: {
            bars: 1,
            intensity: sustain,
            type: "handoff"
        },
        to_final_chorus: {
            bars: 2,
            intensity: ramp(0.4),
            type: "climactic"
        }
    },

    global_controls: {
        intensity_curve: exponential(0.1),
        dynamic_range: PERFORMANCE_TYPE === "live" ? 
            "wide" : "controlled",
        allow_improvisation: IS_LIVE,
        tempo_variance: IS_LIVE ? 0.05 : 0.02
    },

    // Live-specific controls
    when(IS_LIVE) ({
        crowd_interaction: {
            points: ["chorus_end", "solo_peak", "final_chorus"],
            response_threshold: 0.7,
            affects: ["intensity", "duration", "tempo"]
        },
        
        extended_sections: {
            solo: "duration_flexible",
            final_chorus: "repeatable"
        }
    })
});

// Performance generation
export const render_performance = () => {
    const song = generate_song();
    const context = CONTEXT.setup();
    
    return {
        ...song,
        
        // Generate full performance
        performance: COMPOSITION.structure.map(section => ({
            ...song.sections[section.section](section.iteration),
            context: {
                ...context,
                position: section.position,
                flags: section.flags || []
            }
        })),

        // Apply global processing
        processing: {
            dynamics: song.global_controls.dynamic_range,
            effects: MIXING_PROFILES[PERFORMANCE_TYPE].effects,
            mastering: PERFORMANCE_TYPE === "live" ?
                "stage_ready" : "studio_polished"
        }
    };
};

// Export both composition and performance generators
export default {
    info: SONG_INFO,
    composition: COMPOSITION,
    generate: generate_song,
    render: render_performance
};
